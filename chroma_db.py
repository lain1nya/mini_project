import chroma_db

# ChromaDB 클라이언트 생성 (로컬 DB 저장)
client = chroma_db.PersistentClient(path="chroma_db")

# '잔소리_데이터' 컬렉션 생성 (없으면 자동 생성됨)
def get_collection():
    return client.get_or_create_collection("jansory_data")

# 데이터 추가 함수
def add_remarks_to_db(remarks):
    """
    remarks: 리스트 형태로 (id, 잔소리 텍스트) 데이터 추가
    """
    collection = get_collection()
    for idx, (remark, explanation, price) in enumerate(remarks):
        collection.add(
            ids=[str(idx)],  # 각 데이터의 고유 ID
            documents=[remark],  # 검색할 문서 (잔소리)
            metadatas=[{"explanation": explanation, "price": price}]
        )
    print("✅ 잔소리 데이터가 DB에 저장되었습니다.")

# 예제 데이터 추가
example_remarks = [
    # 취업 관련 잔소리 (10~12만원)
    ("요즘 취업 힘들다던데, 어디 지원해봤어?", "취업 준비 중인 사람에게 부담이 되는 전형적인 질문. 스트레스 강도가 높고 피하기 어려움.", 12),
    ("네 친구 누구는 어디 들어갔다더라.", "사회적 비교를 유도하는 말로, 상대방에게 자괴감을 줄 가능성이 높음.", 11),
    ("너는 대기업 안 들어가고 뭐하니?", "대기업 취업에 대한 압박을 주는 질문으로, 듣는 사람에게 부담이 큼.", 10),
    
    # 결혼 관련 잔소리 (12~15만원)
    ("너는 언제 결혼할 거야?", "결혼에 대한 사회적 압박을 주는 질문으로, 정신적 데미지가 크고 피하기 어려움.", 15),
    ("좋은 사람 없니? 주변에 소개라도 받아봐.", "연애나 결혼을 강요하는 뉘앙스로, 듣는 사람에 따라 부담이 될 수 있음.", 13),
    ("네 친구 누구는 벌써 애도 낳았더라.", "결혼과 출산을 비교 대상으로 삼아 상대적 박탈감을 유발.", 14),

    # 자녀·출산 관련 잔소리 (13~15만원)
    ("애는 언제 가질 거야?", "가족 계획을 강요하는 질문으로, 부담과 스트레스가 극대화됨.", 15),
    ("너희 부모님도 손주 보고 싶어 하실 텐데.", "부모님의 기대를 압박으로 전달하는 질문.", 14),

    # 학업 관련 잔소리 (8~10만원)
    ("성적은 어떠니?", "학생들에게 부담을 주는 전형적인 질문. 반복 빈도가 높음.", 9),
    ("요즘 공부는 하고 있니?", "공부에 대한 책임감을 강조하는 질문으로 부담을 줄 수 있음.", 8),
    ("대학은 어디 갈 거야?", "진로에 대한 압박을 주는 질문으로, 정신적 데미지가 큼.", 10),

    # 외모·건강 관련 잔소리 (7~9만원)
    ("살 좀 빼야겠다.", "외모에 대한 평가로 듣는 사람에게 스트레스를 유발할 가능성이 높음.", 9),
    ("요즘 밥은 잘 챙겨 먹니?", "건강을 걱정하는 말이지만, 반복 빈도가 높아 부담이 될 수 있음.", 7),

    # 돈·재테크 관련 잔소리 (10~13만원)
    ("돈은 좀 모았니?", "재정 상태를 묻는 질문으로, 듣는 사람에 따라 부담이 클 수 있음.", 11),
    ("집은 어떻게 할 거야? 요즘 집값 장난 아니던데…", "미래 계획을 강요하는 뉘앙스로, 부담이 큼.", 13),

    # 집안일 관련 잔소리 (7~10만원)
    ("설거지는 좀 도와야지.", "가족 내 역할을 강조하는 말로 반복 빈도가 높음.", 7),
    ("명절 음식 좀 배우는 게 어때?", "명절 가사 노동을 강요하는 뉘앙스가 있어 부담이 될 수 있음.", 10),
]


add_remarks_to_db(example_remarks)